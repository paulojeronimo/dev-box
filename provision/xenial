#!/usr/bin/env bash
set +x
set -eou pipefail

# the command "npx truffle unbox react" requires:
#
# $ sudo pacman -S npm gcc make python2
# $ npm config set python /usr/bin/python2

install_015_react() {
  echo "Installing a sample-react-app ..."
  yarn create react-app sample-react-app
  echo "Preventing react to spawn any browser ..."
  cat >> ~/.bashrc <<'EOF'
# prevent react to spawn any browser
export BROWSER=none
EOF
}

install_010_trufflesuite() {
  echo "Installing ganache-cli ..."
  yarn global add ganache-cli 
  echo "Installing truffle ..."
  yarn global add truffle
  echo "Configuring ganache-cli host ip ..."
  cat >> ~/.bashrc <<'EOF'
# ganache_cli host ip
export gc_host=10.0.2.15
EOF
}

install_006_dotfiles() {
  echo "Installing dotfiles ..."
  local d=~/projects/github.com/paulojeronimo
  mkdir -p $d && cd $d
  git clone https://github.com/paulojeronimo/dotfiles
  ./dotfiles/install
  cd $OLDPWD
}

install_005_nodejs() {
  curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash -
  sudo apt -y install build-essential nodejs gcc g++ make
  curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - \
    && echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list \
    && sudo apt update -qq \
    && sudo apt install -y yarn

  echo "Node.js version is $(node -v)"
  echo "Yarn version is $(yarn -v)"

  echo 'Configuring Yarn on PATH ...'
  echo 'export PATH=`yarn global bin`:$PATH' >> ~/.bashrc
}

install_000_sysadmin() {
  _install lsb-release parted lsof tmux vim tree git
}

_install() {
  local pkgs=$@
  echo "Installing $pkgs ..."
  sudo apt -y install $pkgs
}

_install_all() {
  echo_installing() {
    local fn=$1
    local id=`echo $fn | cut -d_ -f1`
    local class=`echo $fn | cut -d_ -f2`

    echo "[$id] Installing \"$class\" packages ..."
  }

  local src=${BASH_SOURCE[0]}
  local fns=$(cat $src | sed -n 's/^install_\(.*\)() {$/\1/p' | sort)
  for fn in $fns
  do
    echo_installing $fn
    install_${fn}
  done
}

configure_local_mirror() {
  echo "Configuring pacman to use local mirror ..."
  echo 'Server = http://10.0.2.2:8000/$repo/os/$arch' | \
    sudo tee /etc/pacman.d/mirrorlist > /dev/null
}

update_package_list() {
  echo "Updating package list ..."
  sudo apt -y update
}

resize_partition_to_max() {
  #echo "Resizing partition / to the max available size ..."
  :


}

main() {
  echo "Provisioning Arch Linux (with $args) ..."

  local use_local_mirror=false
  while :
  do
    local param=${1:-none}
    shift || break
    case "$param" in
      --use-local-mirror)
        use_local_mirror=true
        ;;
    esac
  done

  $use_local_mirror && configure_local_mirror || true
  update_package_list
  _install_all
  resize_partition_to_max
}

args=${@:-"no args"}
main ${args}
