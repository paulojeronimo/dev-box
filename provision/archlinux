#!/usr/bin/env bash
set +x
set -eou pipefail

PROJECTS_DIR=~/projects

install_ar_trufflereactsample() {
  echo "Installing a truffle-react sample project ..."
  mkdir -p $PROJECTS_DIR/truffle-react-sample && cd $_
  truffle unbox react 
  cd $OLDPWD
}

install_ap_reactsample() {
  echo "Preventing react to spawn any browser ..."
  cat >> ~/.bashrc <<'EOF'
# prevent react to spawn any browser
export BROWSER=none
EOF

  echo "Installing a react sample project ..."
  mkdir -p $PROJECTS_DIR && cd $_
  yarn create react-app react-sample
  cd $OLDPWD
}

install_am_trufflesuite() {
  echo "Installing ganache-cli ..."
  yarn global add ganache-cli 
  echo "Installing truffle ..."
  yarn global add truffle
  echo "Configuring ganache-cli host ip ..."
  cat >> ~/.bashrc <<'EOF'
# ganache_cli host ip
export gc_host=10.0.2.15
EOF
}

install_ai_yarn() {
  echo "Installing yarn ..."
  curl -s -o- -L https://yarnpkg.com/install.sh | bash
  export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
  echo "Yarn version is $(yarn -v)"
}

install_af_nodejs() {
  local node_version=11.15.0
  echo "Installing nvm ..."
  curl -s -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
  
  echo "Installing node $node_version via nvm ..."
  export NVM_DIR="$HOME/.nvm"   
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  nvm install $node_version
  echo "Node.js version is $(node -v)"

  echo "Installing packages used by Node.js when compiling ..."
  _install gcc make python2
}

install_ad_dotfiles() {
  echo "Installing dotfiles ..."
  local d=$PROJECTS_DIR/github.com/paulojeronimo
  mkdir -p $d && cd $d
  git clone https://github.com/paulojeronimo/dotfiles
  ./dotfiles/install
  cd $OLDPWD
}

install_aa_sysadmin() {
  _install lsb-release parted lsof tmux vim tree git virtualbox-guest-utils-nox
}

_install() {
  local pkgs=$@
  echo "Installing $pkgs ..."
  sudo pacman --noconfirm -S $pkgs
}

_install_all() {
  echo_installing() {
    local fn=$1
    local id=`echo $fn | cut -d_ -f1`
    local class=`echo $fn | cut -d_ -f2`

    echo "[$id] Installing \"$class\" packages ..."
  }

  local src=${BASH_SOURCE[0]}
  local fns=$(cat $src | sed -n 's/^install_\(.*\)() {$/\1/p' | sort)
  for fn in $fns
  do
    echo_installing $fn
    install_${fn}
  done
}

configure_local_mirror() {
  echo "Configuring pacman to use local mirror ..."
  echo 'Server = http://10.0.2.2:8000/$repo/os/$arch' | \
    sudo tee /etc/pacman.d/mirrorlist > /dev/null
}

update_package_list() {
  echo "Updating package list ..."
  sudo pacman -Syy
}

resize_partition_to_max() {
  echo "Resizing partition / to the max available size ..."
  sudo parted ---pretend-input-tty /dev/sda resizepart 2 yes 100%
  sudo btrfs filesystem resize max /
  sudo lsblk /dev/sda
}

main() {
  echo "Provisioning Arch Linux (with $args) ..."

  local use_local_mirror=false
  while :
  do
    local param=${1:-none}
    shift || break
    case "$param" in
      --use-local-mirror)
        use_local_mirror=true
        ;;
    esac
  done

  $use_local_mirror && configure_local_mirror || true
  update_package_list
  _install_all
  resize_partition_to_max
}

args=${@:-"no args"}
main ${args}
